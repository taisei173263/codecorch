import React, { useState } from 'react';
import { SecurityVulnerability } from '../services/securityCheckService';
import { AlertTriangle, Shield, ShieldAlert, AlertOctagon } from 'lucide-react';

interface SecurityVulnerabilityViewProps {
  vulnerabilities: SecurityVulnerability[];
}

const SecurityVulnerabilityView: React.FC<SecurityVulnerabilityViewProps> = ({ vulnerabilities }) => {
  const [expandedVulnerability, setExpandedVulnerability] = useState<number | null>(null);
  
  // タイプごとの脆弱性をグループ化
  const vulnerabilityGroups = groupVulnerabilitiesByType(vulnerabilities);
  
  // 重要度によるフィルタリング用の状態
  const [severityFilter, setSeverityFilter] = useState<string>('all');
  
  // 重要度に基づいてフィルタリングした脆弱性を取得
  const filteredVulnerabilities = vulnerabilities.filter(vuln => 
    severityFilter === 'all' || vuln.severity === severityFilter
  );
  
  // 重要度別の脆弱性数
  const severityCounts = {
    high: vulnerabilities.filter(v => v.severity === 'high').length,
    medium: vulnerabilities.filter(v => v.severity === 'medium').length,
    low: vulnerabilities.filter(v => v.severity === 'low').length
  };
  
  // 重要度に基づいたスタイルを取得
  const getSeverityStyle = (severity: string) => {
    switch (severity) {
      case 'high':
        return {
          bgColor: 'bg-red-100 dark:bg-red-900/30',
          textColor: 'text-red-800 dark:text-red-300',
          icon: <AlertOctagon className="h-5 w-5" />,
          label: '高'
        };
      case 'medium':
        return {
          bgColor: 'bg-orange-100 dark:bg-orange-900/30',
          textColor: 'text-orange-800 dark:text-orange-300',
          icon: <AlertTriangle className="h-5 w-5" />,
          label: '中'
        };
      case 'low':
        return {
          bgColor: 'bg-yellow-100 dark:bg-yellow-900/30',
          textColor: 'text-yellow-800 dark:text-yellow-300',
          icon: <Shield className="h-5 w-5" />,
          label: '低'
        };
      default:
        return {
          bgColor: 'bg-gray-100 dark:bg-gray-800',
          textColor: 'text-gray-800 dark:text-gray-300',
          icon: <ShieldAlert className="h-5 w-5" />,
          label: '不明'
        };
    }
  };
  
  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4">
      <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
        セキュリティ脆弱性の検出結果
      </h3>
      
      {vulnerabilities.length === 0 ? (
        <div className="flex flex-col items-center justify-center p-6 bg-green-50 dark:bg-green-900/20 rounded-lg">
          <Shield className="h-12 w-12 text-green-500 dark:text-green-400 mb-2" />
          <h4 className="text-xl font-semibold text-green-700 dark:text-green-300 mb-1">
            脆弱性は検出されませんでした
          </h4>
          <p className="text-sm text-green-600 dark:text-green-400">
            コードは基本的なセキュリティチェックに合格しました。
          </p>
        </div>
      ) : (
        <div className="space-y-4">
          <div className="flex flex-wrap gap-4 mb-4">
            <div className="flex-1 min-w-[150px] p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
              <div className="text-2xl font-bold text-gray-800 dark:text-white mb-1">
                {vulnerabilities.length}
              </div>
              <div className="text-sm text-gray-500 dark:text-gray-400">
                検出された脆弱性の総数
              </div>
            </div>
            <div className="flex-1 min-w-[150px] p-3 bg-red-50 dark:bg-red-900/20 rounded-lg">
              <div className="text-2xl font-bold text-red-600 dark:text-red-400 mb-1">
                {severityCounts.high}
              </div>
              <div className="text-sm text-red-500 dark:text-red-300">
                重大な脆弱性
              </div>
            </div>
            <div className="flex-1 min-w-[150px] p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg">
              <div className="text-2xl font-bold text-orange-600 dark:text-orange-400 mb-1">
                {severityCounts.medium}
              </div>
              <div className="text-sm text-orange-500 dark:text-orange-300">
                中程度の脆弱性
              </div>
            </div>
            <div className="flex-1 min-w-[150px] p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
              <div className="text-2xl font-bold text-yellow-600 dark:text-yellow-400 mb-1">
                {severityCounts.low}
              </div>
              <div className="text-sm text-yellow-500 dark:text-yellow-300">
                軽度の脆弱性
              </div>
            </div>
          </div>
          
          <div className="flex items-center mb-4">
            <div className="mr-2 text-sm font-medium text-gray-700 dark:text-gray-300">
              重要度でフィルタ:
            </div>
            <div className="flex space-x-2">
              <button
                className={`px-3 py-1 text-xs rounded-full ${
                  severityFilter === 'all'
                    ? 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300'
                }`}
                onClick={() => setSeverityFilter('all')}
              >
                すべて
              </button>
              <button
                className={`px-3 py-1 text-xs rounded-full ${
                  severityFilter === 'high'
                    ? 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-300'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300'
                }`}
                onClick={() => setSeverityFilter('high')}
              >
                高 ({severityCounts.high})
              </button>
              <button
                className={`px-3 py-1 text-xs rounded-full ${
                  severityFilter === 'medium'
                    ? 'bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-300'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300'
                }`}
                onClick={() => setSeverityFilter('medium')}
              >
                中 ({severityCounts.medium})
              </button>
              <button
                className={`px-3 py-1 text-xs rounded-full ${
                  severityFilter === 'low'
                    ? 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-300'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300'
                }`}
                onClick={() => setSeverityFilter('low')}
              >
                低 ({severityCounts.low})
              </button>
            </div>
          </div>
          
          <div className="space-y-4">
            {filteredVulnerabilities.length === 0 ? (
              <div className="text-center py-4 text-gray-500 dark:text-gray-400">
                選択した重要度に該当する脆弱性はありません
              </div>
            ) : (
              filteredVulnerabilities.map((vulnerability, index) => {
                const severityStyle = getSeverityStyle(vulnerability.severity);
                return (
                  <div 
                    key={index} 
                    className="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden"
                  >
                    <div 
                      className={`p-3 flex justify-between items-center cursor-pointer ${severityStyle.bgColor} ${severityStyle.textColor}`}
                      onClick={() => setExpandedVulnerability(expandedVulnerability === index ? null : index)}
                    >
                      <div className="flex items-center">
                        {severityStyle.icon}
                        <span className="font-medium ml-2">
                          {translateVulnerabilityType(vulnerability.type)}
                        </span>
                        <span className="ml-2 px-2 py-0.5 text-xs font-medium rounded-full bg-white/20 dark:bg-black/20">
                          {severityStyle.label}
                        </span>
                        {vulnerability.mlDetected && (
                          <span className="ml-2 px-2 py-0.5 text-xs font-medium rounded-full bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-300">
                            ML検出 {vulnerability.confidence ? `(${Math.round(vulnerability.confidence * 100)}%)` : ''}
                          </span>
                        )}
                      </div>
                      <div className="flex items-center text-sm">
                        <span className="mr-2">行 {vulnerability.line}</span>
                        <svg 
                          className={`h-5 w-5 transform transition-transform ${expandedVulnerability === index ? 'rotate-180' : ''}`}
                          fill="none" 
                          viewBox="0 0 24 24" 
                          stroke="currentColor"
                        >
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </svg>
                      </div>
                    </div>
                    
                    {expandedVulnerability === index && (
                      <div className="bg-white dark:bg-gray-800 p-4">
                        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                          説明:
                        </h4>
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                          {vulnerability.description}
                        </p>
                        
                        {vulnerability.cweId && (
                          <div className="mb-4">
                            <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                              CWE ID:
                            </h4>
                            <p className="text-sm text-gray-600 dark:text-gray-400">
                              <a 
                                href={`https://cwe.mitre.org/data/definitions/${vulnerability.cweId.replace('CWE-', '')}.html`} 
                                target="_blank"
                                rel="noopener noreferrer"
                                className="text-blue-600 dark:text-blue-400 hover:underline"
                              >
                                {vulnerability.cweId}
                              </a>
                              {' '}- Common Weakness Enumeration
                            </p>
                          </div>
                        )}
                        
                        {vulnerability.remediation && (
                          <div>
                            <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                              修正方法:
                            </h4>
                            <p className="text-sm text-gray-600 dark:text-gray-400">
                              {vulnerability.remediation}
                            </p>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                );
              })
            )}
          </div>
          
          <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700">
            <h4 className="text-md font-medium text-gray-700 dark:text-gray-300 mb-2">
              脆弱性タイプ別の分布
            </h4>
            <div className="mt-2 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
              {Object.entries(vulnerabilityGroups).map(([type, vulns]) => (
                <div 
                  key={type}
                  className="p-3 border border-gray-200 dark:border-gray-700 rounded-lg"
                >
                  <div className="flex justify-between items-center mb-1">
                    <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                      {translateVulnerabilityType(type)}
                    </span>
                    <span className="text-sm font-bold text-gray-900 dark:text-white">
                      {vulns.length}
                    </span>
                  </div>
                  <div className="h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                    <div 
                      className={getVulnerabilityTypeColorClass(type)}
                      style={{ width: `${(vulns.length / vulnerabilities.length) * 100}%` }}
                    ></div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// 脆弱性をタイプごとにグループ化
const groupVulnerabilitiesByType = (vulnerabilities: SecurityVulnerability[]): Record<string, SecurityVulnerability[]> => {
  const groups: Record<string, SecurityVulnerability[]> = {};
  
  for (const vuln of vulnerabilities) {
    if (!groups[vuln.type]) {
      groups[vuln.type] = [];
    }
    groups[vuln.type].push(vuln);
  }
  
  return groups;
};

// 脆弱性タイプの日本語訳
const translateVulnerabilityType = (type: string): string => {
  const translations: Record<string, string> = {
    'code_injection': 'コード インジェクション',
    'xss': 'クロスサイト スクリプティング (XSS)',
    'command_injection': 'コマンド インジェクション',
    'sql_injection': 'SQL インジェクション',
    'hardcoded_credentials': 'ハードコードされた認証情報',
    'information_exposure': '情報漏洩',
    'insecure_randomness': '安全でない乱数生成',
    'deserialization': '安全でないデシリアライゼーション',
    'path_traversal': 'パストラバーサル',
    'injection': 'インジェクション',
    'sensitive_data_exposure': '機密データの露出',
    'insecure_configuration': '安全でない設定',
    'type_safety': '型安全性の問題',
    'format_string': 'フォーマット文字列の脆弱性'
  };
  
  return translations[type] || type;
};

// 脆弱性タイプに基づいた色クラスを取得
const getVulnerabilityTypeColorClass = (type: string): string => {
  const colorClasses: Record<string, string> = {
    'code_injection': 'bg-red-500',
    'xss': 'bg-red-600',
    'command_injection': 'bg-red-700',
    'sql_injection': 'bg-red-800',
    'hardcoded_credentials': 'bg-orange-500',
    'information_exposure': 'bg-orange-600',
    'insecure_randomness': 'bg-yellow-500',
    'deserialization': 'bg-purple-600',
    'path_traversal': 'bg-indigo-500',
    'injection': 'bg-red-400',
    'sensitive_data_exposure': 'bg-orange-400',
    'insecure_configuration': 'bg-yellow-400',
    'type_safety': 'bg-green-500',
    'format_string': 'bg-blue-500'
  };
  
  return colorClasses[type] || 'bg-gray-500';
};

export default SecurityVulnerabilityView; 